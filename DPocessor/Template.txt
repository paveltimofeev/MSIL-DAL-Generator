//classname                                                     <%CN%>  имя класса, берём из названия таблицы Book_ИмяКласса
//fields array                                                  <%F%>   массив полей
//fields-types array	 (@<Name>, SqlType.Type)				<%FT%>	массив полей и типов
//fields-types array	 (<Name>, Type)							<%FTT%>	массив полей и типов
//fiels stroke separated (<Name>,)                              <%FF%>  строка полей для select'а
//fields stroke separated (<Name>,) without Id field            <%Ff%>  строка полей для insert'а
//fields stroke separated (@<Name>,) without Id field           <%FP%>  строка полей для insert'а (параметры)
//fields stroke separated (<Name> = @<Name>,) without Id field  <%FS%>  строка полей и параметров для update'а
//																		вход и выход из обработки массива
//{N} - Name; {T} - Type; {S} SqlType

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Data.SqlClient;
//using System.Data;

namespace dalCore
{
    public class <%CN%>: SQLBookBase
    {
//public int Id { get; set; }
        >>public <%FTT%> <%F%> { get; set; }

        public <%CN%>(){Initialize();}
        public <%CN%>(int Id){
            this.Id = Id;
            Initialize();
            this.Load(Id); }  
        protected override void Initialize()
        {
			cmdSelect = new SqlCommand("SELECT <%FF%> FROM <%CN%> WHERE Id = @Id");
            cmdSelectList = new SqlCommand("SELECT <%FF%> FROM <%CN%>");
            cmdDelete = new SqlCommand("DELETE FROM <%CN%> WHERE Id = @Id");
            cmdInsert = new SqlCommand("INSERT INTO <%CN%>(<%Ff%>) VALUES(<%FP%>)");
            cmdUpdate = new SqlCommand("UPDATE <%CN%> SET <%FS%> WHERE Id = @Id");
            >>cmdInsert.Parameters.Add("@<%F%>", SqlDbType.<%FT%>);
            >>cmdUpdate.Parameters.Add("@<%F%>", SqlDbType.<%FT%>);
            base.Initialize();
        }
        protected override void Preload(){base.Preload();}
        protected override void Presave(){
            >>cmdInsert.Parameters["@<%F%>"].Value = <%F%>;
            >>cmdUpdate.Parameters["@<%F%>"].Value = <%F%>;
            base.Presave();
        }
        protected override void Postload(DataTable data, int row){
        
        if(data.Rows.Count>= row){
            Id = Convert.ToInt32(data.Rows[row]["Id"].ToString());
            >><%F%> = Convert.To<%FTT%>(data.Rows[row]["<%F%>"].ToString());
            base.Postload(data, row);
            }
            else
            throw new Exception("Item not found.");
        }
        public static <%CN%> Get(int Id){
            <%CN%> temp = new <%CN%>(Id);
            return temp;
        }
        public static <%CN%>[] LoadList(){
            <%CN%> t = new <%CN%>();
            DataTable tempTable = t.LoadDataList();
            <%CN%>[] result = new <%CN%>[tempTable.Rows.Count];
            for (int i = 0; i < result.Length; i++)
            {
                result[i] = new <%CN%>();
                result[i].Postload(tempTable, i);
            }
            return result;
        }
    }
}